<?php
/**
 * Magezon
 *
 * This source file is subject to the Magezon Software License, which is available at https://www.magezon.com/license
 * Do not edit or add to this file if you wish to upgrade the to newer versions in the future.
 * If you wish to customize this module for your needs.
 * Please refer to https://www.magezon.com for more information.
 *
 * @category  Magezon
 * @package   Magezon_ProductAttachments
 * @copyright Copyright (C) 2020 Magezon (https://www.magezon.com)
 */


namespace Magezon\ProductAttachments\Model\ResourceModel;

use Magento\Framework\EntityManager\MetadataPool;
use Magento\Framework\EntityManager\EntityManager;
use Magento\Framework\Model\ResourceModel\Db\Context;
use Magento\Framework\Stdlib\DateTime\DateTime;
use Magento\Rule\Model\ResourceModel\AbstractResource;
use Magento\Framework\Model\AbstractModel;
use Magento\Framework\Filesystem;
use Magento\Framework\App\Filesystem\DirectoryList;
use Magezon\ProductAttachments\Model\FileUploader;
use Magezon\ProductAttachments\Helper\Data;
use Magezon\ProductAttachments\Api\Data\FileInterface;
use Magezon\ProductAttachments\Model\File as FileModel;

class File extends AbstractResource
{
    /**
     * @var DateTime
     */
    protected $date;

    /**
     * @var Data
     */
    protected $fileHelper;

    /**
     * @var EntityManager
     */
    protected $entityManager;

    /**
     * @var MetadataPool
     */
    protected $metadataPool;

    /**
     * @var Filesystem\Directory\WriteInterface
     */
    protected $mediaDirectory;

    /**
     * File constructor.
     * @param Context $context
     * @param MetadataPool $metadataPool
     * @param EntityManager $entityManager
     * @param Filesystem $filesystem
     * @param DateTime $date
     * @param Data $fileHelper
     * @throws \Magento\Framework\Exception\FileSystemException
     */
    public function __construct(
        Context $context,
        MetadataPool $metadataPool,
        EntityManager $entityManager,
        Filesystem $filesystem,
        DateTime $date,
        Data $fileHelper
    ) {
        parent::__construct($context);
        $this->metadataPool = $metadataPool;
        $this->entityManager = $entityManager;
        $this->mediaDirectory = $filesystem->getDirectoryWrite(DirectoryList::MEDIA);
        $this->date = $date;
        $this->fileHelper = $fileHelper;
    }

    /**
     * Initialize resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init('mgz_product_attachments_file', 'file_id');
    }

    /**
     * Process file data before saving
     *
     * @param $object
     * @return $this
     */
    public function _beforeSave(\Magento\Framework\Model\AbstractModel $object)
    {
        if (!$object->getFileHash()) {
            $object->setFileHash($this->fileHelper->getFileHash());
        }
        if ($object->getData('file_data/download_name')) {
            $downloadName = $object->getData('file_data/download_name');
        } else {
            $downloadName = $object->getFileType() == FileModel::TYPE_FILE ?
                pathinfo($object->getData('file_upload/0/name'), PATHINFO_FILENAME) :
                pathinfo($object->getLink(), PATHINFO_FILENAME);
        }
        $extension = pathinfo($object->getFileType() == FileModel::TYPE_FILE ? $object->getName() : $object->getLink(), PATHINFO_EXTENSION);
        $object->setFileExtension($extension);
        $object->setDownloadName($downloadName);
        $object->setUpdateTime($this->date->gmtDate());

        $content = $object->getContents();
        $name = $object->getName();
        if ($content && $name) {
            $target_dir = $this->mediaDirectory->getAbsolutePath(FileUploader::BASE_PATH); // add the specific path to save the file
            $decoded_file = base64_decode($content); // decode the file
            $mime_type = finfo_buffer(finfo_open(), $decoded_file, PATHINFO_EXTENSION); // extract mime type
            $extension = explode(' ', $mime_type)[0]; // imextract extension from mime type
            $name = uniqid();
            $object->setName($name.'.'.$extension);
            $object->setFileExtension($extension);
            $file_dir = $target_dir . $name .'.'.$extension;
            try {
                file_put_contents($file_dir, $decoded_file); // save
            } catch (\Exception $e) {
            }
        }
        return parent::_beforeSave($object);
    }

    protected function _afterSave(\Magento\Framework\Model\AbstractModel $object)
    {
        return parent::_afterSave($object); // TODO: Change the autogenerated stub
    }

    /**
     * Save the object
     *
     * @param AbstractModel $object
     * @return $this
     */
    public function save(AbstractModel $object)
    {
        $this->entityManager->save($object);
        return $this;
    }

    /**
     * Load the object
     *
     * @param AbstractModel $object
     * @param mixed $value
     * @param null $field
     * @return $this|File
     */
    public function load(AbstractModel $object, $value, $field = null)
    {
        $this->entityManager->load($object, $value);
        return $this;
    }

    /**
     * Delete the object
     *
     * @param AbstractModel $object
     * @return $this
     */
    public function delete(AbstractModel $object)
    {
        $this->entityManager->delete($object);
        return $this;
    }

    /**
     * Lookup customer group ids
     *
     * @param $id
     * @return array
     */
    public function lookupCustomerGroupIds($id)
    {
        $entityMetadata = $this->metadataPool->getMetadata(FileInterface::class);
        $linkField      = $entityMetadata->getLinkField();
        $connection = $this->getConnection();
        $select = $connection->select()
            ->from(['mpacg' => $this->getTable('mgz_product_attachments_customer_group')], 'customer_group_id')
            ->where('mpacg.' . $linkField . ' = :file_id');
        return $connection->fetchCol($select, ['file_id' => $id]);
    }

    /**
     * Lookup store ids
     *
     * @param $id
     * @return array
     */
    public function lookupStoreIds($id)
    {
        $entityMetadata = $this->metadataPool->getMetadata(FileInterface::class);
        $linkField      = $entityMetadata->getLinkField();
        $connection = $this->getConnection();
        $select = $connection->select()
            ->from(['mpas' => $this->getTable('mgz_product_attachments_store')], 'store_id')
            ->where('mpas.' . $linkField . ' = :file_id');
        return $connection->fetchCol($select, ['file_id' => $id]);
    }

    public function saveFileToDir($model)
    {
        try {
            $content = $model->getContents();
            $name = $model->getName();
            if ($content) {
                file_put_contents($this->mediaDirectory->getAbsolutePath(FileUploader::BASE_PATH).$name, $content);
            }
        } catch (\Exception $e) {
        }
    }
}
