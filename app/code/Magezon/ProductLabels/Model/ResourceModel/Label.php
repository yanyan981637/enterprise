<?php
/**
 * Magezon
 *
 * This source file is subject to the Magezon Software License, which is available at https://www.magezon.com/license
 * Do not edit or add to this file if you wish to upgrade the to newer versions in the future.
 * If you wish to customize this module for your needs.
 * Please refer to https://www.magezon.com for more information.
 *
 * @category  Magezon
 * @package   Magezon_ProductLabels
 * @copyright Copyright (C) 2020 Magezon (https://www.magezon.com)
 */


namespace Magezon\ProductLabels\Model\ResourceModel;

use Magento\Framework\EntityManager\MetadataPool;
use Magento\Framework\EntityManager\EntityManager;
use Magento\Framework\Model\ResourceModel\Db\Context;
use Magento\Framework\Stdlib\DateTime\DateTime;
use Magento\Rule\Model\ResourceModel\AbstractResource;
use Magento\Framework\Model\AbstractModel;
use Magento\Framework\Filesystem;
use Magento\Framework\App\Filesystem\DirectoryList;

class Label extends AbstractResource
{
    /**
     * @var DateTime
     */
    protected $date;

    /**
     * @var EntityManager
     */
    protected $entityManager;

    /**
     * @var MetadataPool
     */
    protected $metadataPool;

    /**
     * @var Filesystem\Directory\WriteInterface
     */
    protected $mediaDirectory;

    /**
     * File constructor.
     * @param Context $context
     * @param MetadataPool $metadataPool
     * @param EntityManager $entityManager
     * @param Filesystem $filesystem
     * @param DateTime $date
     * @throws \Magento\Framework\Exception\FileSystemException
     */
    public function __construct(
        Context $context,
        MetadataPool $metadataPool,
        EntityManager $entityManager,
        Filesystem $filesystem,
        DateTime $date
    ) {
        parent::__construct($context);
        $this->metadataPool = $metadataPool;
        $this->entityManager = $entityManager;
        $this->mediaDirectory = $filesystem->getDirectoryWrite(DirectoryList::MEDIA);
        $this->date = $date;
    }

    /**
     * Initialize resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init('mgz_productlabels_label', 'label_id');
    }

    protected function _afterSave(\Magento\Framework\Model\AbstractModel $object)
    {
        return parent::_afterSave($object); // TODO: Change the autogenerated stub
    }

    /**
     * Save the object
     *
     * @param AbstractModel $object
     * @return $this
     */
    public function save(AbstractModel $object)
    {
        $this->entityManager->save($object);
        return $this;
    }

    /**
     * Load the object
     *
     * @param AbstractModel $object
     * @param mixed $value
     * @param null $field
     * @return $this|File
     */
    public function load(AbstractModel $object, $value, $field = null)
    {
        $this->entityManager->load($object, $value);
        return $this;
    }

    /**
     * Delete the object
     *
     * @param AbstractModel $object
     * @return $this
     */
    public function delete(AbstractModel $object)
    {
        $this->entityManager->delete($object);
        return $this;
    }

    /**
     * Lookup customer group ids
     *
     * @param $id
     * @return array
     */
    public function lookupCustomerGroupIds($id)
    {
        $entityMetadata = $this->metadataPool->getMetadata(\Magezon\ProductLabels\Model\Label::class);
        $linkField      = $entityMetadata->getLinkField();
        $connection = $this->getConnection();
        $select = $connection->select()
            ->from(['mpacg' => $this->getTable('mgz_productlabels_label_customergroup')], 'customer_group_id')
            ->where('mpacg.' . $linkField . ' = :label_id');
        return $connection->fetchCol($select, ['label_id' => $id]);
    }

    /**
     * Lookup store ids
     *
     * @param $id
     * @return array
     */
    public function lookupStoreIds($id)
    {
        $entityMetadata = $this->metadataPool->getMetadata(\Magezon\ProductLabels\Model\Label::class);
        $linkField      = $entityMetadata->getLinkField();
        $connection = $this->getConnection();
        $select = $connection->select()
            ->from(['mpas' => $this->getTable('mgz_productlabels_label_store')], 'store_id')
            ->where('mpas.' . $linkField . ' = :label_id');
        return $connection->fetchCol($select, ['label_id' => $id]);
    }
}
